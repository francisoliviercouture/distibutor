{"version":3,"sources":["assets/demo/ambigue.png","core/environment/demo.ts","core/services/cartService.ts","components/app-list-item/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Demo","inventory","Array","randItems","getRandomArbitrary","i","item","id","name","ibu","alcoolPercentage","type","push","min","max","Math","random","cartService","_cartItems","this","length","CartContext","React","createContext","addToCart","AppListItem","props","Consumer","className","src","ambigue","alt","parseInt","onClick","addItem","App","demo","useState","countCart","setCountCart","items","Provider","value","count","path","cartItems","map","cartItem","idx","exact","to","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,qC,gMCG9BC,EAAb,kGAMQ,IAJA,IAAIC,EAAY,IAAIC,MAEdC,EAAYC,EAAmB,EAAG,IAE/BC,EAAG,EAAGA,EAAIF,EAAWE,IAAK,CAC/B,IACMC,EAAO,CACTC,GAAIF,EACJG,KAAM,aACNC,IAJYL,EAAmB,EAAG,IAKlCM,iBAAkB,IAClBC,KAAM,UAGVV,EAAUW,KAAKN,GAGnB,OAAOL,MAnBf,KAuBA,SAASG,EAAmBS,EAAaC,GACrC,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,E,qBCP5BI,EAAc,IAjB3B,iDACYC,WAAchB,QAD1B,oDAWYI,GACJa,KAAKD,WAAWN,KAAKN,KAZ7B,gCAIQ,OAAOa,KAAKD,aAJpB,4BAQQ,OAAOC,KAAKD,WAAWE,WAR/B,MAkBaC,EAAcC,IAAMC,cAAc,CAAEN,cAAaO,UAAW,eCTlE,SAASC,EAAYC,GACxB,OACI,kBAACL,EAAYM,SAAb,MAAuB,gBAAGV,EAAH,EAAGA,YAAaO,EAAhB,EAAgBA,UAAhB,OACnB,yBAAKI,UAAU,oBACX,yBAAKA,UAAU,eAAeC,IAAKC,IAASC,IAAI,KAChD,yBAAKH,UAAU,wBACX,yBAAKA,UAAU,wBACX,8BAAOF,EAAMpB,MAAkCoB,EAAMpB,KAAKE,MAC1D,8BAAM,2BAAIkB,EAAMpB,MAAkCoB,EAAMpB,KAAKK,QAEjE,yBAAKiB,UAAU,wBACX,kCAAQF,EAAMpB,MAAkC0B,SAASN,EAAMpB,KAAKG,MACpE,2BAAIiB,EAAMpB,MAAkCoB,EAAMpB,KAAKI,iBAAvD,OAEJ,yBAAKkB,UAAU,wBACX,8BACA,4BAAQK,QAAS,WAEb,OADAhB,EAAYiB,QAAQR,EAAMpB,MACnBkB,MACR,uBAAGI,UAAU,uB,mBCiBzBO,MAlCf,WACE,IAAMC,EAAO,IAAIpC,EADJ,EAEqBqC,mBAAiB,GAFtC,mBAENC,EAFM,KAEKC,EAFL,OAGGF,mBAAwCD,EAAKnC,WAAtDuC,EAHM,oBAKb,OACE,kBAAC,IAAD,KACE,kBAACnB,EAAYoB,SAAb,CAAsBC,MAAO,CAAEzB,cAAaO,UAAW,kBAAMe,EAAatB,EAAY0B,UACpF,0BAAMf,UAAU,OACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,SACT3B,EAAY4B,WAAa5B,EAAY4B,UAAUC,KAAI,SAACC,EAAUC,GAAX,OAAoB,2BAAID,EAAStC,SAEvF,kBAAC,IAAD,CAAOwC,OAAK,EAACL,KAAK,gBAChB,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,qBACb,gDACA,wDAA0B,0CAE5B,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAMsB,GAAG,SAAQ,yCAAeZ,EAAf,QAGrB,yBAAKV,UAAU,eACZY,GAASA,EAAMM,KAAI,SAACxC,EAAM0C,GAAP,OAAe,kBAACvB,EAAD,CAAa0B,IAAKH,EAAK1C,KAAMA,cC1B5D8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.570945f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ambigue.947205fb.png\";","import { BeerListItem } from \"../models/beer-list-item\";\r\nimport { ListItem } from \"../models/list-item\";\r\n\r\nexport class Demo {\r\n    get inventory(): Array<ListItem<BeerListItem>> {\r\n        let inventory = new Array<ListItem<BeerListItem>>()\r\n\r\n        const randItems = getRandomArbitrary(1, 20);\r\n\r\n        for (let i =0; i < randItems; i++) {\r\n            const randIbu = getRandomArbitrary(5, 95);\r\n            const item = {\r\n                id: i,\r\n                name: 'Ambiguë',\r\n                ibu: randIbu, \r\n                alcoolPercentage: 4.5, \r\n                type: 'Bitter'\r\n            } as ListItem<BeerListItem>;\r\n\r\n            inventory.push(item);\r\n        }\r\n\r\n        return inventory;\r\n    }\r\n}\r\n\r\nfunction getRandomArbitrary(min: number, max: number): number {\r\n    return Math.random() * (max - min) + min;\r\n}","import React from 'react';\r\nimport { BeerListItem } from '../models/beer-list-item';\r\n\r\nexport class CartService {\r\n    private _cartItems =  Array<BeerListItem>();\r\n\r\n    get cartItems(): Array<BeerListItem> {\r\n        return this._cartItems;\r\n    }\r\n\r\n    get count(): number {\r\n        return this._cartItems.length;\r\n    }\r\n\r\n    addItem(item: BeerListItem) {\r\n        this._cartItems.push(item);\r\n    }\r\n}\r\n\r\n\r\nexport const cartService = new CartService();\r\nexport const CartContext = React.createContext({ cartService, addToCart: () => {} });","import React from 'react';\r\nimport { ListItem } from '../../core/models/list-item';\r\nimport { BeerListItem } from '../../core/models/beer-list-item';\r\n\r\nimport ambigue from '../../assets/demo/ambigue.png';\r\nimport { CartContext } from '../../core/services/cartService';\r\n\r\n\r\ninterface AppListItemProps {\r\n    item: any;\r\n}\r\n\r\nexport function AppListItem(props: AppListItemProps) {\r\n    return (\r\n        <CartContext.Consumer>{({ cartService, addToCart }) => (\r\n            <div className=\"app-content-item\">\r\n                <img className=\"app-item-img\" src={ambigue} alt=\"\" />\r\n                <div className=\"app-item-col-wrapper\">\r\n                    <div className=\"app-item-row-wrapper\">\r\n                        <span>{props.item as ListItem<BeerListItem> && props.item.name}</span>\r\n                        <span><b>{props.item as ListItem<BeerListItem> && props.item.type}</b></span>\r\n                    </div>\r\n                    <div className=\"app-item-row-wrapper\">\r\n                        <p>IBU {props.item as ListItem<BeerListItem> && parseInt(props.item.ibu)}</p>\r\n                        <p>{props.item as ListItem<BeerListItem> && props.item.alcoolPercentage} %</p>\r\n                    </div>\r\n                    <div className=\"app-item-row-wrapper\">\r\n                        <div></div>\r\n                        <button onClick={() => {\r\n                            cartService.addItem(props.item)\r\n                            return addToCart();\r\n                        }}><i className=\"las la-plus\"></i></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )}\r\n        </CartContext.Consumer>\r\n    );\r\n}","import React, { useState } from 'react';\nimport './App.scss';\nimport { ListItem } from './core/models/list-item';\nimport { Demo } from './core/environment/demo';\nimport { BeerListItem } from './core/models/beer-list-item';\nimport { AppListItem } from './components/app-list-item';\nimport { cartService, CartContext } from './core/services/cartService';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const demo = new Demo();\n  const [countCart, setCountCart] = useState<number>(0);\n  const [items] = useState<Array<ListItem<BeerListItem>>>(demo.inventory);\n\n  return (\n    <Router>\n      <CartContext.Provider value={{ cartService, addToCart: () => setCountCart(cartService.count) }}>\n        <main className=\"App\">\n          <Switch>\n            <Route path=\"/cart\">\n              {cartService.cartItems && cartService.cartItems.map((cartItem, idx) => (<p>{cartItem.ibu}</p>))}\n            </Route>\n            <Route exact path=\"/distributor\">\n              <div className=\"app-header\">\n                <div className=\"app-header--title\">\n                  <h1>Distributor Name</h1>\n                  <p>Delivery area: Québec, <b>Québec</b></p>\n                </div>\n                <div className=\"app-header--cart\">\n                  <Link to=\"/cart\"><button>Cart ({countCart})</button></Link>\n                </div>\n              </div>\n              <div className=\"app-content\">\n                {items && items.map((item, idx) => <AppListItem key={idx} item={item} />)}\n              </div>\n            </Route>\n          </Switch>\n        </main>\n      </CartContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}